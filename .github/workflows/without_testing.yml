name: Prepare New Release without testing

on:
  workflow_dispatch:
    inputs:
      release:
        description: 'Release version type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: read

jobs:
  version_and_release_without_testing:
    runs-on: ubuntu-latest
    name: Export Game
    steps:
    - name: "‚úîÔ∏è Checkout"
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: "üì£ Release on push"
      id: release
      uses: rymndhng/release-on-push-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        bump_version_scheme: ${{ github.event_name == 'push' && 'norelease' || inputs.release }}
        use_github_release_notes: true
      # Always include the checkout step so that
      # your project is available for Godot to export
    - name: "‚úèÔ∏è Generate release changelog"
      if: ${{ steps.release.outputs.version != '' }}
      uses: heinrichreimer/github-changelog-generator-action@v2.3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: "üíæ Commit new version"
      if: ${{ steps.release.outputs.version != '' }}
      run: |
          sed -i 's/GAME_VERSION := ".*"/GAME_VERSION := "${{ steps.release.outputs.version }}"/g' ./src/dreamscape/CFConst.gd
          sed -i 's/Therapy through Nightmares \[.*\]/Therapy through Nightmares [${{ steps.release.outputs.version }}]/g' README.md
          git config user.email github-actions@github.com
          git config user.name github-actions
          git commit -am 'version incremented'
          git push
    - name: "üõ† Randomize which html music will be exported"
      if: ${{ steps.release.outputs.version != '' }}
      shell: bash
      run: |
          SCENE=ordeal;  KEEP=6; cd assets/music/${SCENE}          && ls *.ogg | tail -n+${KEEP} | shuf > oggs && cat oggs | xargs -I {} mv "{}" "html_ignore_{}" && cat oggs | xargs -I {} sed -i 's/{}/html_ignore_{}/g' "{}.import" && cat oggs | xargs -I {} sed -i "s|[a-z0-9]\+\.oggstr|$(sh -c 'echo -n html_ignore_{} | md5sum  | awk "{print \$1}"').oggstr|g" "{}.import" && cat oggs | xargs -I {} mv "{}.import" "html_ignore_{}.import" && rm oggs && ls -larth
          SCENE=journal; KEEP=4; cd ../../../assets/music/${SCENE} && ls *.ogg | tail -n+${KEEP} | shuf > oggs && cat oggs | xargs -I {} mv "{}" "html_ignore_{}" && cat oggs | xargs -I {} sed -i 's/{}/html_ignore_{}/g' "{}.import" && cat oggs | xargs -I {} sed -i "s|[a-z0-9]\+\.oggstr|$(sh -c 'echo -n html_ignore_{} | md5sum  | awk "{print \$1}"').oggstr|g" "{}.import" && cat oggs | xargs -I {} mv "{}.import" "html_ignore_{}.import" && rm oggs && ls -larth
          SCENE=main;    KEEP=2; cd ../../../assets/music/${SCENE} && ls *.ogg | tail -n+${KEEP} | shuf > oggs && cat oggs | xargs -I {} mv "{}" "html_ignore_{}" && cat oggs | xargs -I {} sed -i 's/{}/html_ignore_{}/g' "{}.import" && cat oggs | xargs -I {} sed -i "s|[a-z0-9]\+\.oggstr|$(sh -c 'echo -n html_ignore_{} | md5sum  | awk "{print \$1}"').oggstr|g" "{}.import" && cat oggs | xargs -I {} mv "{}.import" "html_ignore_{}.import" && rm oggs && ls -larth
          SCENE=shop;    KEEP=2; cd ../../../assets/music/${SCENE} && ls *.ogg | tail -n+${KEEP} | shuf > oggs && cat oggs | xargs -I {} mv "{}" "html_ignore_{}" && cat oggs | xargs -I {} sed -i 's/{}/html_ignore_{}/g' "{}.import" && cat oggs | xargs -I {} sed -i "s|[a-z0-9]\+\.oggstr|$(sh -c 'echo -n html_ignore_{} | md5sum  | awk "{print \$1}"').oggstr|g" "{}.import" && cat oggs | xargs -I {} mv "{}.import" "html_ignore_{}.import" && rm oggs && ls -larth
          SCENE=boss;    KEEP=4; cd ../../../assets/music/${SCENE} && ls *.ogg | tail -n+${KEEP} | shuf > oggs && cat oggs | xargs -I {} mv "{}" "html_ignore_{}" && cat oggs | xargs -I {} sed -i 's/{}/html_ignore_{}/g' "{}.import" && cat oggs | xargs -I {} sed -i "s|[a-z0-9]\+\.oggstr|$(sh -c 'echo -n html_ignore_{} | md5sum  | awk "{print \$1}"').oggstr|g" "{}.import" && cat oggs | xargs -I {} mv "{}.import" "html_ignore_{}.import" && rm oggs && ls -larth
    - name: "ü§ñ Export game"
      if: ${{ steps.release.outputs.version != '' }}
      uses: firebelley/godot-export@v3.0.0
      with:
        godot_executable_download_url: https://downloads.tuxfamily.org/godotengine/3.5/Godot_v3.5-stable_linux_headless.64.zip
        godot_export_templates_download_url: https://downloads.tuxfamily.org/godotengine/3.5/Godot_v3.5-stable_export_templates.tpz
        relative_project_path: ./
        base_version: "${{ steps.release.outputs.version }}"
        create_release: false
        archive_export_output: true
        export_debug: true
    - name: "üõ† Prepare files for publishing"
      if: ${{ steps.release.outputs.version != '' }}
      shell: bash
      run: |
          cp -v /home/runner/.local/share/godot/dist/* .
          mkdir -p build/StandaloneWindows64
          mkdir -p build/StandaloneLinux64
          mkdir -p build/StandaloneMacOS
          cp '/home/runner/.local/share/godot/builds/LinuxX11/Hypnagonia_Linux.x86_64' .
          cp '/home/runner/.local/share/godot/builds/LinuxX11/Hypnagonia_Linux.x86_64' build/StandaloneLinux64/
          cp '/home/runner/.local/share/godot/builds/LinuxX11 Lite/Hypnagonia_Linux_Lite.x86_64' .
          cp '/home/runner/.local/share/godot/builds/Windows Desktop/Hypnagonia_Windows.exe' .
          cp '/home/runner/.local/share/godot/builds/Windows Desktop/Hypnagonia_Windows.exe' build/StandaloneWindows64/
          cp '/home/runner/.local/share/godot/builds/Windows Desktop Lite/Hypnagonia_Windows_Lite.exe' .
          cp '/home/runner/.local/share/godot/builds/Mac OSX/Hypnagonia_MacOSX.zip' .
          cp '/home/runner/.local/share/godot/builds/Mac OSX/Hypnagonia_MacOSX.zip' build/StandaloneMacOS/
          ls -larth
    - name: "üöÄ Upload HTML5 version to itch.io"
      if: ${{ steps.release.outputs.version != '' }}
      uses: josephbmanley/butler-publish-itchio-action@master
      env:
        BUTLER_CREDENTIALS: "${{ secrets.BUTLER_CREDENTIALS }}"
        CHANNEL: HTML5
        ITCH_GAME: hypnagonia
        ITCH_USER: dbzer0
        PACKAGE: HTML5.zip
        VERSION: "${{ steps.release.outputs.version }}"
    - name: "‚ò¢ Upload Windows Lite version to itch.io"
      if: ${{ steps.release.outputs.version != '' }}
      uses: josephbmanley/butler-publish-itchio-action@master
      env:
        BUTLER_CREDENTIALS: "${{ secrets.BUTLER_CREDENTIALS }}"
        CHANNEL: windows_lite
        ITCH_GAME: hypnagonia
        ITCH_USER: dbzer0
        PACKAGE: Hypnagonia_Windows_Lite.exe
        VERSION: "${{ steps.release.outputs.version }}"
    - name: "‚ò¢ Upload Windows version to itch.io"
      if: ${{ steps.release.outputs.version != '' }}
      uses: josephbmanley/butler-publish-itchio-action@master
      env:
        BUTLER_CREDENTIALS: "${{ secrets.BUTLER_CREDENTIALS }}"
        CHANNEL: windows
        ITCH_GAME: hypnagonia
        ITCH_USER: dbzer0
        PACKAGE: Hypnagonia_Windows.exe
        VERSION: "${{ steps.release.outputs.version }}"
    - name: "üêß Upload Linux Lite version to itch.io"
      if: ${{ steps.release.outputs.version != '' }}
      uses: josephbmanley/butler-publish-itchio-action@master
      env:
        BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
        CHANNEL: linux_lite
        ITCH_GAME: hypnagonia
        ITCH_USER: dbzer0
        PACKAGE: Hypnagonia_Linux_Lite.x86_64
        VERSION: "${{ steps.release.outputs.version }}"
    - name: "üêß Upload Linux version to itch.io"
      if: ${{ steps.release.outputs.version != '' }}
      uses: josephbmanley/butler-publish-itchio-action@master
      env:
        BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
        CHANNEL: linux
        ITCH_GAME: hypnagonia
        ITCH_USER: dbzer0
        PACKAGE: Hypnagonia_Linux.x86_64
        VERSION: "${{ steps.release.outputs.version }}"
    - name: "‚ò£ Upload OSX version to itch.io"
      if: ${{ steps.release.outputs.version != '' }}
      uses: josephbmanley/butler-publish-itchio-action@master
      env:
        BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}
        CHANNEL: osx
        ITCH_GAME: hypnagonia
        ITCH_USER: dbzer0
        PACKAGE: Hypnagonia_MacOSX.zip
        VERSION: "${{ steps.release.outputs.version }}"
    - name: "üîß Publish all versions with Steamworks"
      if: ${{ steps.release.outputs.version != '' }}
      uses: game-ci/steam-deploy@v1
      with:
        username: ${{ secrets.STEAM_USERNAME }}
        password: ${{ secrets.STEAM_PASSWORD }}
        configVdf: ${{ secrets.STEAM_CONFIG_VDF}}
        ssfnFileName: ${{ secrets.STEAM_SSFN_FILE_NAME }}
        ssfnFileContents: ${{ secrets.STEAM_SSFN_FILE_CONTENTS }}
        appId: 1962610
        buildDescription: "${{ steps.release.outputs.version }}"
        rootPath: build
        depot1Path: StandaloneWindows64
        depot2Path: StandaloneLinux64
        depot3Path: StandaloneMacOS
        releaseBranch: prerelease
    - name: üì® Notify Matrix General Chat
      uses: s3krit/matrix-message-action@v0.0.3
      with:
        room_id: ${{ secrets.MATRIX_ROOM_ID }}
        access_token: ${{ secrets.MATRIX_TOKEN }}
        message: "New Release Available: [${{ steps.release.outputs.version }}](https://github.com/db0/hypnagonia/blob/main/CHANGELOG.md)"
        server: "matrix.org"
      if: ${{ steps.release.outputs.version != '' }}
